{"version":3,"sources":["helpers/icons.js","components/event/UpComingEvent.js","components/pages/Home.js","components/navigation/NavigationContainer.js","components/pages/NoMatch.js","components/event/CreateEventForm.js","components/pages/CreateEvent.js","components/modals/AssignModal.js","components/modals/ReAssignModal.js","components/event/RefreshmentDetails.js","components/pages/EventDetails.js","components/pages/EventNoLongerExists.js","components/App.js","serviceWorker.js","index.js"],"names":["Icons","library","add","faStar","faSpinner","faMinus","faPlus","faCalendarAlt","faClock","faMapMarkerAlt","faInfoCircle","faUser","faUsers","faUtensils","UpComingEvent","props","event","eventName","location","eventDate","eventTime","_id","className","icon","to","Home","useState","events","setEvents","isLoadingEvent","setIsLoadingEvent","useEffect","axios","get","then","res","console","log","data","catch","err","spin","map","key","NavigationContainer","exact","NoMatch","CreateEventForm","setEventName","setEventDate","setEventTime","setLocation","description","setDescription","createdBy","setCreatedBy","refreshmentName","refreshments","setRefreshments","handleAddRefreshmentInput","handleRefreshmentValueChange","e","index","target","name","prevRefreshments","value","handleRefreshmentValueIsEmptyOnSubmit","filter","refreshment","handleOnKeyPress","a","id","includes","preventDefault","persist","parentElement","nextSibling","childNodes","focus","type","onSubmit","method","url","handleSuccessfulSubmit","onKeyPress","htmlFor","placeholder","onChange","autoComplete","required","val","idx","onClick","list","splice","handleRemoveRefreshmentInput","CreateEvent","history","push","ReactModal","setAppElement","AssignModal","takenBy","setTakenBy","style","content","top","left","right","marginRight","transform","width","overlay","backgroundColor","onRequestClose","handleModalClose","isOpen","assignModalIsOpen","handleTakenBySubmit","ReAssignModal","reAssignModalIsOpen","RefreshmentDetails","setAssignModalIsOpen","setReAssignModalIsOpen","modalName","handleModalOpen","takenByName","assignmentType","handleSuccessfulEditTakenBy","assigned","EventDetails","setEvent","errorMessage","setErrorMessage","isLoadingEditDelete","setIsLoadingEditDelete","updatedEvent","match","params","slug","totalAttendees","delete","EventNoLongerExists","App","path","component","Boolean","window","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.2412d8f0.chunk.js","sourcesContent":["// import { faStar, faClock, faCalendarAlt } from \"@fortawesome/free-regular-svg-icons\";\nimport { faStar } from \"@fortawesome/free-regular-svg-icons\";\nimport { faMapMarkerAlt, faSpinner, faMinus, faPlus, faInfoCircle, faUser, faUsers, faUtensils, faClock, faCalendarAlt } from \"@fortawesome/free-solid-svg-icons\";\nimport { library } from \"@fortawesome/fontawesome-svg-core\";\n\nconst Icons = () => {\n    return library.add(\n        faStar,\n        faSpinner,\n        faMinus,\n        faPlus,\n        faCalendarAlt,\n        faClock,\n        faMapMarkerAlt,\n        faInfoCircle,\n        faUser,\n        faUsers,\n        faUtensils\n    );\n};\n\nexport default Icons;","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\n\n\nconst UpComingEvent = (props) => {\n    const { eventName, location, eventDate, eventTime, _id } = props.event\n    return (\n        <div className=\"upcoming-events-wrapper\">\n            <div className=\"upcoming-events-heading-text\">\n                <h2>{eventName}</h2>\n            </div>\n            <div className=\"upcoming-events-content\">\n                <div className=\"upcoming-events-content-item\">\n                    <div>\n                        {location}\n                    </div>\n                    <div>\n                        <FontAwesomeIcon icon={'map-marker-alt'} className=\"upcoming-events-icon\"/>\n                    </div>\n                </div>\n                <div className=\"upcoming-events-content-item\">\n                    <div>\n                        {eventDate}\n                    </div>\n                    <div>\n                        <FontAwesomeIcon icon={'calendar-alt'} className=\"upcoming-events-icon\"/>\n                    </div>\n                </div>\n                <div className=\"upcoming-events-content-item\">\n                    <div>\n                        {eventTime}\n                    </div>\n                    <div>\n                        <FontAwesomeIcon icon={'clock'} className=\"upcoming-events-icon\"/>\n                    </div>\n                </div>\n            </div>\n            <div className=\"upcoming-event-link-wrapper\">\n                <Link\n                    to={`event-details/${_id}`}\n                    className=\"upcoming-event-link\"\n                >\n                    View Details\n                </Link>\n            </div>\n        </div>\n    );\n}\n \nexport default UpComingEvent;","import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\n\nimport UpComingEvent from '../event/UpComingEvent';\n\nconst Home = () => {\n    const [events, setEvents] = useState([])\n    const [isLoadingEvent, setIsLoadingEvent] = useState(true);\n\n    const fetchEvents = () => {\n        axios.get('https://df-event-api.herokuapp.com/api/events')\n        // axios.get('http://localhost:5000/api/events')\n            .then(res => {\n                console.log(res)\n                setIsLoadingEvent(false)\n                setEvents(res.data)\n            })\n            .catch(err => {\n                console.log('fetchEvents Error: ', err)\n            })\n    }\n\n    useEffect(fetchEvents, [])\n\n    const renderEvents = () => {\n        return events.map(event => {\n            return <UpComingEvent key={event._id} event={event}/>\n        })\n    }\n    return (\n        <div className=\"home-wrapper\">\n            <div className=\"container\">\n                <h1 className=\"home-heading-text\">Upcoming Events:</h1>\n                {isLoadingEvent ? (\n                    <div className=\"spinner-wrapper\">\n                        <FontAwesomeIcon\n                            icon=\"spinner\"\n                            spin\n                            className=\"big-spinner\"\n                        />\n                    </div>\n                ) : (\n                    renderEvents()\n                )}\n            </div>\n        </div>\n    );\n}\n \nexport default Home;","import React from 'react';\nimport { NavLink } from 'react-router-dom'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\n\nconst NavigationContainer = () => {\n    return (\n        <nav>\n            <ul className=\"container nav-items-wrapper\">\n                <li className=\"nav-item-wrapper\">\n                    <NavLink\n                        exact\n                        to=\"/\"\n                        className=\"nav-item\"\n                    >\n                        <FontAwesomeIcon icon={[\"far\", \"star\"]} className='nav-icon'/>\n                        EVENTS\n                    </NavLink>\n                </li>\n                <li className=\"nav-item-wrapper\">\n                    <NavLink\n                        to=\"/create-event\"\n                        className=\"nav-item\"\n                    >\n                        CREATE EVENT\n                    </NavLink>\n                </li>\n            </ul>\n        </nav>\n    );\n}\n \nexport default NavigationContainer;","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nconst NoMatch = () => {\n    return (\n        <div>\n            <Link to=\"/\">This page doesn't exist... Go Back Home</Link>\n        </div>\n    );\n}\n \nexport default NoMatch;","// TODO: Make Location use google map api\n// TODO: Handle errors\n// TODO: Handle form validation\n// TODO: Make the functionality more like gitKrakens glowboards tasklist\n// TODO: When you add a new refreshment and you want to get rid of the first one you can't since I don't let you get rid of the first.  Maybe you can get rid of the text at least\nimport React, { useState } from 'react';\nimport axios from 'axios';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\n\nconst CreateEventForm = (props) => {\n    const [eventName, setEventName] = useState(\"\")\n    const [eventDate, setEventDate] = useState(\"\")\n    const [eventTime, setEventTime] = useState(\"\")\n    const [location, setLocation] = useState(\"\")\n    const [description, setDescription] = useState(\"\")\n    const [createdBy, setCreatedBy] = useState(\"\")\n    const [refreshments, setRefreshments] = useState([{refreshmentName: \"\"}])\n\n    const handleAddRefreshmentInput = () => {\n        setRefreshments([...refreshments, {refreshmentName: \"\"}])\n    }\n\n    const handleRemoveRefreshmentInput = (idx) => {\n        if (idx === 0) return\n        const list = [...refreshments];\n        list.splice(idx, 1);\n        setRefreshments(list);\n    }\n\n    const handleRefreshmentValueChange = (e) => {\n        const index = e.target.name\n        const prevRefreshments = [...refreshments]\n        prevRefreshments[index].refreshmentName = e.target.value;\n        setRefreshments(prevRefreshments)\n    }\n\n    const handleRefreshmentValueIsEmptyOnSubmit = (refreshments) => {\n        return refreshments.filter((refreshment) => {\n            return refreshment.refreshmentName !== \"\"\n        })\n    }\n\n    const handleOnKeyPress = async (event) => {\n        if (event.target.id.includes('refreshment') && event.key === \"Enter\") {\n            event.preventDefault();\n            event.persist()\n            await handleAddRefreshmentInput()\n            event.target.parentElement.nextSibling.childNodes[1].focus()\n        } else if (event.target.type !== 'textarea' && event.key === \"Enter\") {\n            event.preventDefault();\n        }\n    }\n    \n    const handleSubmit = (event) => {\n        event.preventDefault()\n        axios(\n            {\n                method: 'post',\n                url: 'https://df-event-api.herokuapp.com/api/events/add-event',\n                // url: 'http://localhost:5000/api/events/add-event',\n                data: {\n                    eventName: eventName,\n                    eventDate: eventDate,\n                    eventTime: eventTime,\n                    location: location,\n                    description: description,\n                    createdBy: createdBy,\n                    refreshments: handleRefreshmentValueIsEmptyOnSubmit(refreshments)\n                }\n            }\n        ).then(res => {\n            props.handleSuccessfulSubmit(res.data._id)\n            console.log(res)\n        })\n        .catch(err => {\n            console.log('handleSubmit Error: ', err)\n        })\n    }\n    return (\n        <form\n            onSubmit={handleSubmit}\n            onKeyPress={handleOnKeyPress}\n            className=\"create-event-form\"\n        >\n            <div className=\"form-group-wrapper\">\n                <label htmlFor=\"eventName\">EVENT NAME:</label>\n                <input\n                    type=\"text\"\n                    placeholder=\"Event Name...\"\n                    name=\"eventName\"\n                    id=\"eventName\"\n                    value={eventName}\n                    onChange={event => setEventName(event.target.value)}\n                    autoComplete=\"off\"\n                    required\n                />\n            </div>\n\n            <div className=\"form-group-wrapper\">\n                <label htmlFor=\"eventDate\">EVENT DATE:</label>\n                <input\n                    type=\"date\"\n                    placeholder=\"Event Date...\"\n                    name=\"eventDate\"\n                    id=\"eventDate\"\n                    value={eventDate}\n                    onChange={event => setEventDate(event.target.value)}\n                    autoComplete=\"off\"\n                    required\n                />\n            </div>\n\n            <div className=\"form-group-wrapper\">\n                <label htmlFor=\"eventTime\">EVENT TIME:</label>\n                <input\n                    type=\"time\"\n                    placeholder=\"Event Time...\"\n                    name=\"eventTime\"\n                    id=\"eventTime\"\n                    value={eventTime}\n                    onChange={event => setEventTime(event.target.value)}\n                    autoComplete=\"off\"\n                    required\n                />\n            </div>\n\n            <div className=\"form-group-wrapper\">\n            <label htmlFor=\"location\">LOCATION:</label>\n                <input\n                    type=\"text\"\n                    placeholder=\"Location...\"\n                    name=\"location\"\n                    id=\"location\"\n                    value={location}\n                    onChange={event => setLocation(event.target.value)}\n                    autoComplete=\"off\"\n                    required\n                />\n            </div>\n\n            <div className=\"form-group-wrapper\">\n                <label htmlFor=\"description\">DESCRIPTION:</label>\n                <textarea\n                    placeholder=\"Description...\"\n                    name=\"description\"\n                    id=\"description\"\n                    value={description}\n                    onChange={event => setDescription(event.target.value)}\n                    autoComplete=\"off\"\n                    required\n                />\n            </div>\n\n            <div className=\"form-group-wrapper\">\n                <label htmlFor=\"createdBy\">CREATED BY:</label>\n                <input\n                    type=\"text\"\n                    placeholder=\"Created By...\"\n                    name=\"createdBy\"\n                    id=\"createdBy\"\n                    value={createdBy}\n                    onChange={event => setCreatedBy(event.target.value)}\n                    autoComplete=\"off\"\n                    required\n                />\n            </div>\n\n\n            {\n                refreshments.map((val, idx) => {\n                    const refreshmentId = `refreshment-${idx}`;\n                    return (\n                        <div key={`refreshment-${idx}`} className=\"form-group-wrapper\">\n                            <div className=\"refreshment-label-icon-wrapper\">\n                                <label htmlFor={`refreshment-${idx + 1}`}>{`Refreshment #${idx + 1}`}</label>\n                                <div className=\"refreshment-icon-wrapper\">\n                                    <FontAwesomeIcon\n                                        icon={'plus'}\n                                        className=\"refreshment-icon\"\n                                        onClick={handleAddRefreshmentInput}\n                                    />\n                                    <FontAwesomeIcon\n                                        icon={'minus'}\n                                        className=\"refreshment-icon refreshment-icon-danger\"\n                                        onClick={() => handleRemoveRefreshmentInput(idx)}\n                                    />\n                                </div>\n                            </div>\n                            <input\n                                type=\"text\"\n                                name={idx}\n                                id={`refreshment-${idx + 1}`}\n                                onChange={handleRefreshmentValueChange}\n                                value={refreshments[idx].refreshmentName}\n                                autoComplete=\"off\"\n                                placeholder=\"Refreshment Name...\"\n                            />\n                        </div>\n                    );      \n                })\n            }\n            <button type=\"submit\" className=\"create-event-form-btn\">CREATE</button>\n        </form>\n    );\n}\n \nexport default CreateEventForm;","import React from 'react';\nimport CreateEventForm from '../event/CreateEventForm';\n\nconst CreateEvent = (props) => {\n    const handleSuccessfulSubmit = (id) => {\n        props.history.push(`event-details/${id}`)\n    }\n    return (\n        <div className=\"container\">\n            <h1 className=\"create-event-heading\">Create Event</h1>\n            <CreateEventForm handleSuccessfulSubmit={handleSuccessfulSubmit} />\n        </div>\n    );\n}\n \nexport default CreateEvent;","import React, { useState } from \"react\";\nimport ReactModal from \"react-modal\";\n\nReactModal.setAppElement(\"#root\");\n\nfunction AssignModal(props) {\n  const [takenBy, setTakenBy] = useState('')\n\n  const customStyles = {\n    content: {\n      top: \"50%\",\n      left: \"50%\",\n      right: \"auto\",\n      marginRight: \"-50%\",\n      transform: \"translate(-50%, -50%)\",\n      width: \"75vw\"\n    },\n    overlay: {\n      backgroundColor: \"rgba(1,1,1,0.75)\"\n    }\n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault()\n    props.handleTakenBySubmit(takenBy, 'assign-takenBy')\n  }\n\n  return (\n    <ReactModal\n        style={customStyles}\n        onRequestClose={() => {\n            props.handleModalClose('assign');\n        }}\n        isOpen={props.assignModalIsOpen}\n    >\n        <h1>{props.refreshment.refreshmentName}</h1>\n        <p>Looks like you want to bring \"{props.refreshment.refreshmentName}\".  Please supply us with your name so the attendees know who is bringing what.</p>\n        <form onSubmit={handleSubmit}>\n          <label htmlFor=\"takenBy\">Name:</label>\n          <input\n              type=\"text\"\n              placeholder=\"Your name...\"\n              name=\"takenBy\"\n              id=\"takenBy\"\n              value={takenBy}\n              onChange={event => setTakenBy(event.target.value)}\n              autoComplete=\"off\"\n              required\n          />\n          <button type=\"submit\">ASSIGN ITEM</button>\n        </form>\n    </ReactModal>\n  );\n}\n\nexport default AssignModal;","import React, { useState } from \"react\";\nimport ReactModal from \"react-modal\";\n\nReactModal.setAppElement(\"#root\");\n\nfunction ReAssignModal(props) {\n  const [takenBy, setTakenBy] = useState('')\n\n  const customStyles = {\n    content: {\n      top: \"50%\",\n      left: \"50%\",\n      right: \"auto\",\n      marginRight: \"-50%\",\n      transform: \"translate(-50%, -50%)\",\n      width: \"75vw\"\n    },\n    overlay: {\n      backgroundColor: \"rgba(1,1,1,0.75)\"\n    }\n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault()\n    props.handleTakenBySubmit(takenBy, 'reAssign-takenBy')\n  }\n\n  return (\n    <ReactModal\n        style={customStyles}\n        onRequestClose={() => {\n            props.handleModalClose('assign');\n        }}\n        isOpen={props.reAssignModalIsOpen}\n    >\n        <h1>{props.refreshment.refreshmentName}</h1>\n        <p>Does {props.refreshment.takenBy} no longer want to bring \"{props.refreshment.refreshmentName}\"?  Please supply us with your name and we will re-assign this item, so the attendees know who's bringing it.</p>\n        <form onSubmit={handleSubmit}>\n          <label htmlFor=\"takenBy\">Name:</label>\n          <input\n              type=\"text\"\n              placeholder=\"Your name...\"\n              name=\"takenBy\"\n              id=\"takenBy\"\n              value={takenBy}\n              onChange={event => setTakenBy(event.target.value)}\n              autoComplete=\"off\"\n              required\n          />\n          <button type=\"submit\">REASSIGN ITEM</button>\n        </form>\n    </ReactModal>\n  );\n}\n\nexport default ReAssignModal;","import React, { useState } from 'react';\nimport axios from 'axios';\n\nimport AssignModal from '../modals/AssignModal';\nimport ReAssignModal from '../modals/ReAssignModal';\n\nconst RefreshmentDetails = (props) => {\n    const [assignModalIsOpen, setAssignModalIsOpen] = useState(false)\n    const [reAssignModalIsOpen, setReAssignModalIsOpen] = useState(false)\n\n    const handleModalClose = (modalName) => {\n        if (modalName === 'assign') {\n            setAssignModalIsOpen(false);\n        } else {\n            setReAssignModalIsOpen(false);\n        }\n    };\n\n    const handleModalOpen = (modalName) => {\n        if (modalName === 'assign') {\n            setAssignModalIsOpen(true);\n        } else {\n            setReAssignModalIsOpen(true);\n        }\n    }\n\n    const handleTakenBySubmit = (takenByName, assignmentType) => {\n        axios(\n            {\n                method: 'put',\n                url: `https://df-event-api.herokuapp.com/api/events/${assignmentType}/${props.refreshment._id}`,\n                // url: `http://localhost:5000/api/events/${assignmentType}/${props.refreshment._id}`,\n                data: {takenBy: takenByName}\n            }\n        )\n        .then((res) => {\n            if (assignmentType === \"assign-takenBy\") {\n                handleModalClose('assign')\n            } else {\n                handleModalClose('reAssign')\n            }\n            props.handleSuccessfulEditTakenBy(res.data)\n        })\n    }\n\n    const { refreshmentName, assigned, takenBy } = props.refreshment\n    return (\n        <div className=\"refreshment-details-wrapper\">\n            <AssignModal\n                assignModalIsOpen={assignModalIsOpen}\n                handleModalClose={handleModalClose}\n                refreshment={props.refreshment}\n                handleTakenBySubmit={handleTakenBySubmit}\n            />\n            <ReAssignModal\n                reAssignModalIsOpen={reAssignModalIsOpen}\n                handleModalClose={handleModalClose}\n                refreshment={props.refreshment}\n                handleTakenBySubmit={handleTakenBySubmit}\n            />\n            {assigned ? (\n                <div className=\"refreshment-details-item assigned\">\n                    <div>{takenBy} is bringing this item</div>\n                    <div className=\"refreshment-name\">{refreshmentName}</div>\n                    <div\n                        onClick={() => handleModalOpen('reAssign')}\n                        className=\"refreshment-assign-btn reAssign-btn\"\n                    >\n                        Reassign Item\n                    </div>   \n                </div>\n            ) : (\n                <div className=\"refreshment-details-item re-assign\">\n                    <div className=\"refreshment-name\">{refreshmentName}</div>\n                    <div\n                        onClick={() => handleModalOpen('assign')}\n                        className=\"refreshment-assign-btn\"\n                    >\n                        Bring Item\n                    </div>\n                </div>\n            )}\n        </div>\n    );\n}\n\nexport default RefreshmentDetails;","// TODO: Is it best to push users to a event-no-longer-exists page or just have a ternary in the return\n// TODO: Create a modal to open after the user pushes delete to ask if they want to delete or cancel\nimport React, { useState, useEffect } from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport axios from 'axios';\n\nimport RefreshmentDetails from '../event/RefreshmentDetails';\n\nconst EventDetails = (props) => {\n    const [event, setEvent] = useState([])\n    const [refreshments, setRefreshments] = useState([])\n    const [errorMessage, setErrorMessage] = useState(\"\")\n    const [isLoadingEvent, setIsLoadingEvent] = useState(true);\n    const [isLoadingEditDelete, setIsLoadingEditDelete] = useState(false);\n\n    const fetchEvent = () => {\n        axios.get(`https://df-event-api.herokuapp.com/api/events/get-event/${props.match.params.slug}`)\n        // axios.get(`http://localhost:5000/api/events/get-event/${props.match.params.slug}`)\n            .then(res => {\n                if (res.data === null) {\n                    props.history.push('/event-no-longer-exists')\n                } else {\n                    console.log(res)\n                    setIsLoadingEvent(false)\n                    setEvent(res.data)\n                    setRefreshments(res.data.refreshments)\n                }\n            })\n            .catch(err => {\n                props.history.push('/event-no-longer-exists')\n                console.log('fetchEvents Error: ', err)\n            })\n    }\n\n    const handleSuccessfulEditTakenBy = (updatedEvent) => {\n        setEvent(updatedEvent)\n        setRefreshments(updatedEvent.refreshments)\n    }\n\n    useEffect(fetchEvent, [])\n\n    const renderRefreshments = () => {\n        return refreshments.map(refreshment => {\n            return (\n                <RefreshmentDetails\n                    key={refreshment._id}\n                    refreshment={refreshment}\n                    handleSuccessfulEditTakenBy={handleSuccessfulEditTakenBy}\n                />\n            )\n        })\n    }\n\n    const handleDeleteEvent = () => {\n        setIsLoadingEditDelete(true)\n        axios.delete(`https://df-event-api.herokuapp.com/api/events/delete-event/${props.match.params.slug}`)\n        // axios.delete(`http://localhost:5000/api/events/delete-event/${props.match.params.slug}`)\n            .then(res => {\n                if (res.data === \"Event Deleted!\") {\n                    props.history.push('/')\n                } else {\n                    console.log('handleDeleteEvent Error: ', res)\n                }\n            })\n            .catch(err => {\n                setIsLoadingEditDelete(false)\n                setErrorMessage('Error Deleting.  Please Try Again')\n                console.log('handleDeleteEvent Error: ', err)\n            })\n    }\n\n    const handleEditEvent = () => {\n        console.log('handleeditevent')\n    }\n\n    return (\n        <div className=\"event-details\">\n            {isLoadingEvent ? (\n                <div className=\"spinner-wrapper\">\n                    <FontAwesomeIcon\n                        icon=\"spinner\"\n                        spin\n                        className=\"big-spinner\"\n                    />\n                </div>\n            ) : (\n                <div className=\"container\">\n                    <div className=\"event-details-wrapper\">\n                        <div className=\"event-details-heading\">\n                            <h1>{event.eventName}</h1>\n                        </div>\n                        <div className=\"event-details-item\">\n                            <div className=\"event-details-item-heading-wrapper\">\n                                <FontAwesomeIcon icon={'calendar-alt'} className=\"event-details-icon\"/>\n                                <div className=\"event-details-item-heading-text\">Date:</div>\n                            </div>\n                            <div className=\"event-details-content\">{event.eventDate}</div>\n                        </div>\n                        <div className=\"event-details-item\">\n                            <div className=\"event-details-item-heading-wrapper\">\n                                <FontAwesomeIcon icon={'clock'} className=\"event-details-icon\"/>\n                                <div className=\"event-details-item-heading-text\">Time:</div>\n                            </div>\n                            <div className=\"event-details-content\">{event.eventTime}</div>\n                        </div>\n                        <div className=\"event-details-item\">\n                            <div className=\"event-details-item-heading-wrapper\">\n                                <FontAwesomeIcon icon={'map-marker-alt'} className=\"event-details-icon\"/>\n                                <div className=\"event-details-item-heading-text\">Event Location:</div>\n                            </div>\n                            <div className=\"event-details-content\">{event.location}</div>\n                        </div>\n                        <div className=\"event-details-item\">\n                            <div className=\"event-details-item-heading-wrapper\">\n                                <FontAwesomeIcon icon={'info-circle'} className=\"event-details-icon\"/>\n                                <div className=\"event-details-item-heading-text\">Event Description:</div>\n                            </div>\n                            <div className=\"event-details-content\">{event.description}</div>\n                        </div>\n                        <div className=\"event-details-item\">\n                            <div className=\"event-details-item-heading-wrapper\">\n                                <FontAwesomeIcon icon={'user'} className=\"event-details-icon\"/>\n                                <div className=\"event-details-item-heading-text\">Created By:</div>\n                            </div>\n                            <div className=\"event-details-content\">{event.createdBy}</div>\n                        </div>\n                        <div className=\"event-details-item\">\n                            <div className=\"event-details-item-heading-wrapper\">\n                                <FontAwesomeIcon icon={'users'} className=\"event-details-icon\"/>\n                                <div className=\"event-details-item-heading-text\">Total Attendees:</div>\n                            </div>\n                            <div className=\"event-details-content\">{event.totalAttendees}</div>\n                        </div>\n                    </div>\n                    <div className=\"event-details-item\">\n                        <div className=\"event-details-item-heading-wrapper\">\n                            <FontAwesomeIcon icon={'utensils'} className=\"event-details-icon\"/>\n                            <div className=\"event-details-item-heading-text\">Refreshments:</div>\n                        </div>\n                        <div className=\"event-details-content\">\n                            {renderRefreshments()}\n                        </div>\n                    </div>\n                    <div className=\"event-details-edit-delete-wrapper\">\n                        {isLoadingEditDelete ? (\n                            <div className=\"spinner-wrapper\">\n                                <FontAwesomeIcon\n                                    icon=\"spinner\"\n                                    spin\n                                    className=\"small-spinner\"\n                                />\n                            </div>\n                            ) : (\n                            <>\n                                <button className=\"event-details-btn\" onClick={handleEditEvent}>\n                                    EDIT EVENT\n                                </button>\n                                <button className=\"event-details-btn danger\" onClick={handleDeleteEvent}>\n                                    DELETE EVENT\n                                </button>\n                            </>\n                        )}\n                    </div>\n                </div>\n            )}\n            <div className=\"error\">{errorMessage}</div>\n        </div>\n    );\n}\n \nexport default EventDetails;","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nconst EventNoLongerExists = () => {\n    return (\n        <div>\n            <h1>I'm sorry that event no longer exists</h1>\n            <Link to=\"/\">HEAD BACK HOME</Link>\n        </div>\n    );\n}\n \nexport default EventNoLongerExists;","import React from 'react';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n} from \"react-router-dom\";\n\nimport '../styles/main.scss';\nimport Icons from \"../helpers/icons\";\nimport Home from './pages/Home';\nimport NavigationContainer from './navigation/NavigationContainer';\nimport NoMatch from './pages/NoMatch';\nimport CreateEvent from './pages/CreateEvent';\nimport EventDetails from './pages/EventDetails';\nimport EventNoLongerExists from './pages/EventNoLongerExists';\n\nconst App = () => {\n  Icons()\n  return (\n    <Router>\n      <NavigationContainer />\n      <Switch>\n        <Route exact path=\"/\" component={Home}/>\n        <Route path=\"/create-event\" component={CreateEvent}/>\n        <Route path=\"/event-details/:slug\" component={EventDetails}/>\n        <Route exact path=\"/event-no-longer-exists\" component={EventNoLongerExists}/>\n        <Route component={NoMatch}/>\n      </Switch>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}